"""
Scheduler SharePoint API shim backed by the in-process simulator.

This module adapts calls expected by the Scheduler to the sharepoint_sim
service objects (no HTTP). It can be swapped for real API calls later.
"""
from __future__ import annotations

from typing import List
from pathlib import Path
from shutil import copyfile

from sharepoint_sim.config import load_config
from sharepoint_sim.service import SharePointCSVGenerator
from sharepoint_sim.storage import Storage

_generator: SharePointCSVGenerator | None = None
_storage: Storage | None = None


def _ensure_sim() -> tuple[SharePointCSVGenerator, Storage]:
    cfg = load_config()
    global _generator, _storage
    if _generator is None:
        _generator = SharePointCSVGenerator(root_dir=cfg.output_dir, seed=cfg.seed)
    if _storage is None:
        _storage = _generator.storage
    return _generator, _storage


def authenticate_sharepoint() -> None:
    """No-op for simulator; present for API symmetry."""
    _ensure_sim()


def list_sharepoint_files(folder: str) -> List[str]:  # noqa: ARG001 - folder unused in sim
    """List filenames currently generated by the simulator."""
    _, storage = _ensure_sim()
    return [f.name for f in storage.list_files()]


def download_sharepoint_file(folder: str, filename: str, dest: Path) -> Path:  # noqa: ARG001 - folder unused in sim
    """Copy a generated CSV from simulator storage to destination path."""
    _, storage = _ensure_sim()
    for f in storage.list_files():
        if f.name == filename:
            dest.parent.mkdir(parents=True, exist_ok=True)
            copyfile(f.path, dest)
            return dest
    raise FileNotFoundError(filename)


def pregenerate_datasets(names: List[str], rows: int | None = None) -> List[str]:
    """Helper for tests: ensure datasets exist; return created filenames."""
    gen, _ = _ensure_sim()
    paths = gen.generate_many(names, rows)
    return [p.name for p in paths]
